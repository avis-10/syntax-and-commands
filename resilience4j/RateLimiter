The `@RateLimiter` annotation provided by Resilience4j allows you to add rate limiting behavior to your methods. Here are the common configuration properties that you can use with the `@RateLimiter` annotation:

1. **value** (default: 50):
   The maximum number of calls allowed per second.

2. **name**:
   An optional name for the rate limiter. If not provided, Resilience4j will generate a default name.

3. **limitRefreshPeriod** (default: 1 second):
   The time interval during which the rate limit applies. It defines the rate limit window.

4. **limitForPeriod** (default: 50):
   The maximum number of calls allowed within the `limitRefreshPeriod`.

5. **timeoutDuration** (default: Duration.ofMillis(0)):
   The maximum time a call is allowed to wait to acquire a permit to execute the method. If set to a non-zero value, it allows waiting for a permit.

6. **backend** (default: Semaphores):
   The backend type to use for rate limiting. It can be `Semaphores` or `ThreadPool`.

7. **fallbackMethod**:
   The name of the fallback method to be executed when the rate limit is exceeded. The fallback method must have the same signature as the annotated method.

8. **bulkhead** (default: false):
   Whether to integrate the rate limiter with a bulkhead. If enabled, both rate limiting and bulkheading will be applied to the method.

9. **fallbackOn** (default: {}):
   Specifies the exception types for which the fallback method should be triggered. You can provide an array of exception classes.

10. **exceptionPredicate** (default: null):
    A custom predicate that determines if an exception should trigger the fallback method. If set, it takes precedence over `fallbackOn`.

11. **ignoreExceptions** (default: {}):
    Specifies the exception types that should be ignored for rate limiting purposes. Exceptions of these types won't affect the rate limiter state.

These are some of the key configuration properties available with the `@RateLimiter` annotation in Resilience4j. You can use these properties to customize the rate limiting behavior according to your needs. Like the other annotations discussed earlier, the `@RateLimiter` annotation is part of the Spring Boot Resilience4j integration and requires Resilience4j to be properly set up in your application.
